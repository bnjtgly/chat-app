[{"/home/benjie/testing/chat-app/frontend/src/index.js":"1","/home/benjie/testing/chat-app/frontend/src/App.js":"2","/home/benjie/testing/chat-app/frontend/src/constants/index.js":"3","/home/benjie/testing/chat-app/frontend/src/components/Header.js":"4","/home/benjie/testing/chat-app/frontend/src/components/Register.js":"5","/home/benjie/testing/chat-app/frontend/src/components/ChatRoom/ChatRooms.js":"6","/home/benjie/testing/chat-app/frontend/src/components/ChatRoom/ChatRoomShow.js":"7","/home/benjie/testing/chat-app/frontend/src/components/ChatRoom/CreateRoom.js":"8","/home/benjie/testing/chat-app/frontend/src/components/Login.js":"9","/home/benjie/testing/chat-app/frontend/src/utils/index.js":"10","/home/benjie/testing/chat-app/frontend/src/components/ChatRoom/ChatMessage.js":"11","/home/benjie/testing/chat-app/frontend/src/components/ChatRoom/ChatRoomWebSocket.js":"12"},{"size":544,"mtime":1650176249356,"results":"13","hashOfConfig":"14"},{"size":6351,"mtime":1650176335646,"results":"15","hashOfConfig":"14"},{"size":273,"mtime":1650509640959,"results":"16","hashOfConfig":"14"},{"size":2210,"mtime":1650173889546,"results":"17","hashOfConfig":"14"},{"size":3246,"mtime":1649654496385,"results":"18","hashOfConfig":"14"},{"size":5066,"mtime":1649922941745,"results":"19","hashOfConfig":"14"},{"size":5255,"mtime":1649919261595,"results":"20","hashOfConfig":"14"},{"size":6130,"mtime":1649922281745,"results":"21","hashOfConfig":"14"},{"size":3901,"mtime":1650410125196,"results":"22","hashOfConfig":"14"},{"size":75,"mtime":1649419820039,"results":"23","hashOfConfig":"14"},{"size":1056,"mtime":1649940334072,"results":"24","hashOfConfig":"14"},{"size":813,"mtime":1649900555054,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1b0dwyw",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/home/benjie/testing/chat-app/frontend/src/index.js",[],["55","56"],"/home/benjie/testing/chat-app/frontend/src/App.js",[],"/home/benjie/testing/chat-app/frontend/src/constants/index.js",[],"/home/benjie/testing/chat-app/frontend/src/components/Header.js",[],"/home/benjie/testing/chat-app/frontend/src/components/Register.js",[],"/home/benjie/testing/chat-app/frontend/src/components/ChatRoom/ChatRooms.js",["57","58"],"import React, { Fragment, useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport avatar from './img/avatar.jpg';\nimport { APP_URL } from '../../constants';\nimport { Button } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n    chatSection: {\n        width: '100%',\n        height: '80vh'\n    },\n    headBG: {\n        backgroundColor: '#e0e0e0'\n    },\n    borderRight500: {\n        borderRight: '1px solid #e0e0e0'\n    },\n    messageArea: {\n        height: '70vh',\n        overflowY: 'auto'\n    }\n});\n\nconst ChatRooms = (props) => {\n\n    const classes = useStyles();\n    const [chatrooms, setChatrooms] = useState([]);\n    const history = useHistory();\n\n    useEffect(() => {\n        console.log('currentuser ======>', props.currentUser)\n        const { user_id } =  props.currentUser;\n        // fetch(`${APP_URL}/api/chatrooms`, {\n        fetch(`${APP_URL}/chatrooms`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"jwt_token\")}`,\n            } \n        })\n        .then(response => response.json())\n        .then(data => {\n            var chatrooms = data.data;\n            // console.log(chatrooms)\n            // if(chatrooms.length > 0 && chatrooms !== undefined) {\n            if(chatrooms !== null) {\n                setChatrooms(chatrooms);\n                props.updateCurrentUserRooms(data.data);\n            }\n        })\n    }, [])\n\n    const handleClick = (chatroom) => {\n        history.push(`/chatroom/${chatroom.id}`)\n    }\n\n    return (\n        <Fragment>\n            {\n                (chatrooms.length !== 0 && chatrooms.length !== undefined) ? \n                    (<div>\n                        <Grid container>\n                            <Grid item xs={12} >\n                                <Typography variant=\"h5\" className=\"header-message\">Chat</Typography>\n                            </Grid>\n                        </Grid>\n                        <Grid container component={Paper} className={classes.chatSection}>\n                            <Grid item xs={12} className={classes.borderRight500}>\n                                <List>\n                                    <ListItem button key={props.currentUser.email}>\n                                        <ListItemIcon>\n                                        <Avatar alt={props.currentUser.email} src={avatar} />\n                                        </ListItemIcon>\n                                        <ListItemText primary={props.currentUser.email}></ListItemText>\n                                    </ListItem>\n                                </List>\n                                <Divider />\n                                    <Grid item xs={12} style={{padding: '10px'}}>\n                                        <TextField id=\"outlined-basic-email\" label=\"Search\" variant=\"outlined\" fullWidth />\n                                    </Grid>\n                                <Divider />\n                                <List>\n                                {chatrooms.map((room) => {\n                                    return (    \n                                        <div>\n                                            <ListItem button key={room.id}>\n                                                <ListItemIcon>\n                                                    <Avatar alt={room.title} src={room.title} />\n                                                </ListItemIcon>\n                                                <ListItemText primary={room.title}>{room.title}</ListItemText>\n                                                <Button variant=\"contained\" color=\"primary\" onClick={() => handleClick(room)}>\n                                                    Start Chat\n                                                </Button>\n                                            </ListItem>\n                                        </div>\n                                    )\n                                })}\n                                </List>\n                            </Grid>\n                        </Grid>\n                    </div>) :\n                    (<div>\n                        <h1>Please Create a Room to Chat With friends :)</h1>\n                    </div>)\n            }\n        </Fragment>\n    )  \n}\n\nexport default ChatRooms;","/home/benjie/testing/chat-app/frontend/src/components/ChatRoom/ChatRoomShow.js",["59","60","61"],"import React, { Component, Fragment, useEffect, useState } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Fab from '@material-ui/core/Fab';\nimport SendIcon from '@material-ui/icons/Send';\nimport avatar from './img/avatar.jpg';\nimport { APP_URL } from '../../constants';\nimport ChatMessage from './ChatMessage';\nimport ChatroomWebSocket from './ChatRoomWebSocket';\n\nconst styles = theme => ({\n    table: {\n        minWidth: 650,\n    },\n    chatSection: {\n        width: '100%',\n        height: '80vh'\n    },\n    headBG: {\n        backgroundColor: '#e0e0e0'\n    },\n    borderRight500: {\n        borderRight: '1px solid #e0e0e0'\n    },\n    messageArea: {\n        height: '70vh',\n        overflowY: 'auto'\n    }\n});\n\n\nclass ChatRoomShow extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            messageText: []\n        }\n    }\n\n    handleChange = (e) => {\n        e.preventDefault()\n        this.setState({\n            messageText: e.target.value\n        })\n    }   \n    \n    handleSendMessage = (e) => {\n        e.preventDefault();\n        \n        const message = {\n            body: this.state.messageText,\n            chatroom_id: this.props.roomData.chatroom.id,\n            user_id: this.props.currentUser.id\n        }\n\n        // fetch(`${APP_URL}/api/messages`, {\n        fetch(`${APP_URL}/messages`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                'Authorization': `Bearer ${localStorage.getItem(\"jwt_token\")}`,\n            },\n            body: JSON.stringify({\n                // message: {\n                    message: message,\n                    // user_id: this.props.currentUser.id\n                // }\n            })\n        })\n        .then(resp => resp.json())\n        .then(result => {\n            let messageDiv = document.getElementById('messages')\n            messageDiv.scrollTop = messageDiv.scrollHeight\n            this.setState({\n                messageText: ''\n            })\n        })\n    }\n\n    whichUser = (message) => {\n        const user = this.props.roomData.users.data.find(user => user.id === message.user_id )\n        return user\n    }\n\n    displayMessages = (messages) => {\n        return messages.map(message => {\n            const user = this.whichUser(message)\n            return (\n                message.body !== null ? \n                    <ChatMessage key={message.id} message={message} user={user} currentUser={this.props.currentUser}/> :\n                    <div></div>\n            )\n        }) \n    }\n\n    render() {\n        const { classes } = this.props;\n        console.log('messages ==>', this.props.roomData.messages)\n        return(\n            <Fragment>\n                <div>\n                    <Grid item xs={9}>\n                        <List className={classes.messageArea}>\n                            <ListItem key=\"1\">\n                                <Grid container>\n                                    <Grid item xs={12}>\n                                        <div id='chat-feed'>\n                                            <h3>Chat Feed:</h3>\n                                            <div id='messages'>\n                                                { this.props.roomData.messages !== undefined && this.props.roomData.messages.length > 0 ? (\n                                                    this.displayMessages(this.props.roomData.messages)\n                                                ) : (\n                                                    <h3>This room has no messages yet - be the first to post!</h3>\n                                                ) }\n                                            </div>\n                                        </div>\n                                    </Grid>\n                                </Grid>\n                            </ListItem>\n                        </List>\n                        <Divider />\n                        <Grid container style={{padding: '20px'}}>\n                            <Grid item xs={11}>\n                                <TextField id=\"outlined-basic-email\" label=\"Type Something\" value={this.state.messageText} onChange={this.handleChange} fullWidth />\n                            </Grid>\n                            <Grid xs={1} align=\"right\">\n                                <Fab color=\"primary\" aria-label=\"add\" onClick={this.handleSendMessage}><SendIcon /></Fab>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n    \n                    <ChatroomWebSocket\n                        cableApp={this.props.cableApp}\n                        getRoomData={this.props.getRoomData}\n                        roomData={this.props.roomData}\n                        updateApp={this.props.updateApp}\n                    />\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default withStyles(styles)(ChatRoomShow);","/home/benjie/testing/chat-app/frontend/src/components/ChatRoom/CreateRoom.js",["62","63"],"import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { AppBar, Button, Chip, FormControl, Input, InputLabel, MenuItem, Select, Tab, Tabs } from '@material-ui/core';\nimport { APP_URL } from '../../constants';\n\nconst styles = (theme) => ({\n    root: {\n        '& > *': {\n        margin: theme.spacing(1),\n        width: '25ch',\n        },\n    },\n    tabsIndicator: {\n        backgroundColor: '#54AAB3',\n    },\n    selected: {\n        backgroundColor: '#54AAB3',\n        color: '#ffffff',\n        fontWeight: 600,\n        fontSize: 14\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n        maxWidth: 300,\n    },\n    chips: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    chip: {\n        margin: 2,\n    },\n    noLabel: {\n        marginTop: theme.spacing(3),\n    },\n});\n\nclass CreateRoom extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = { \n            roomName: '',\n            users: '',\n            currentTab: 0,\n            userName: []\n        }\n    }\n\n    componentDidMount() {\n        fetch(`${APP_URL}/api/users/get_users`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"jwt_token\")}`,\n            }\n        })\n        .then(response => response.json())\n        .then(data => {\n            var users = this.state.users;\n            this.setState({\n                users: data.data.map((user) => user.email)\n            })\n        })\n    }        \n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        // fetch(`${APP_URL}/api/chatrooms`, {\n        fetch(`${APP_URL}/chatrooms`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"jwt_token\")}`,\n            },\n            body: JSON.stringify({\n                chatroom: {\n                    title: this.state.roomName,\n                }, \n                users: this.state.userName.concat(this.props.currentUser.email),\n            })\n        })\n        .then(response => response.json())\n        .then(data => {\n            this.props.updateRooms(data.data)\n            this.props.history.push('/')\n        })\n    }   \n        \n    handleChange = (event) => {\n        const name = event.target.name;\n        this.setState({\n            [name]: event.target.value,\n        });\n    };\n\n    handleTabChange = () => {\n        let tabValue = this.state.currentTab\n        // this.setState({\n        //     currentTab: tabValue == 0 ? tabValue + 1 : tabValue - 1\n        // })\n    }\n\n    ITEM_HEIGHT = 48;\n    ITEM_PADDING_TOP = 8;\n    MenuProps = {\n        PaperProps: {\n            style: {\n            maxHeight: this.ITEM_HEIGHT * 4.5 + this.ITEM_PADDING_TOP,\n            width: 250,\n            },\n        },\n    };\n\n    render() { \n        const { classes } = this.props;\n        const { users, currentTab, roomName, userName } = this.state;\n\n        console.log('curent tab ===========> ', currentTab)\n        console.log('username ===========> ', userName)\n        return ( \n            <div className=\"form-items\">\n                <h1>Create Room</h1>\n                <AppBar position=\"static\" color='secondary' style={{\"min-width\": 120}}>\n                    <Tabs value={currentTab} onChange={this.handleTabChange()} classes={{indicator: classes.tabsIndicator}}>\n                        <Tab label=\"Public Room\" classes={{selected: classes.selected}}/>\n                        <Tab label=\"Private Room\" classes={{selected: classes.selected}}/>\n                    </Tabs>\n                </AppBar>\n                {currentTab === 0 && \n                    <form noValidate autoComplete=\"off\" onSubmit={(e) => this.handleSubmit(e)} >\n                        <h3>Enter Room Name</h3>\n                        <TextField\n                            label=\"Room Name\" \n                            variant=\"outlined\" \n                            name=\"roomName\"\n                            value={roomName}\n                            onChange={this.handleChange}  \n                        />\n                        <h3>Select users</h3>\n                        <FormControl className={classes.formControl}>\n                            <InputLabel id=\"demo-mutiple-chip-label\">User Names</InputLabel>\n                            \n                            <Select\n                            labelId=\"demo-mutiple-chip-label\"\n                            id=\"demo-mutiple-chip\"\n                            name=\"userName\"\n                            multiple\n                            value={userName}\n                            onChange={this.handleChange}\n                            input={<Input id=\"select-multiple-chip\" />}\n                            renderValue={(selected) => (\n                                <div className={classes.chips}>\n                                {selected.map((value) => (\n                                    <Chip key={value} label={value} className={classes.chip} />\n                                ))}\n                                </div>\n                            )}\n                            MenuProps={this.MenuProps}\n                            >\n                            {users.length > 0 ? users.map((name) => (\n                                <MenuItem key={name} value={name} >\n                                    {name}\n                                </MenuItem>\n                            )) : []}\n                            </Select>\n                        </FormControl>\n                    <br></br><br></br>\n                    <Button variant=\"contained\" color=\"primary\" type=\"Submit\">\n                        Submit\n                    </Button>\n                </form>\n                }\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(CreateRoom);","/home/benjie/testing/chat-app/frontend/src/components/Login.js",[],"/home/benjie/testing/chat-app/frontend/src/utils/index.js",[],"/home/benjie/testing/chat-app/frontend/src/components/ChatRoom/ChatMessage.js",["64","65"],"import React from 'react';\nimport avatar from \"./img/avatar.jpg\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nconst ChatMessage = (props) => {\n\n    const whichUser = () => {\n        const my_message = props.currentUser.user_id\n        const message = props.message.user_id\n        let message_output = 'other-user-message'\n\n        if (my_message === message) {\n            message_output = 'current-user-message'\n        }\n\n        return message_output\n    }\n\n    return (\n        <div id=\"chat-message\" className={whichUser()}>\n            <div style={{marginBottom: \"15px\"}}>\n                <div style={{float: \"left\", marginRight: \"15px\"}}>\n                    {/*<Avatar alt=\"user-avatar\" src={`http://localhost:3000${props.user.attributes.avatar.url}`} />*/}\n                </div>\n                <div>\n                    <span style={{paddingTop: \"5px\"}}>{props.user.attributes.complete_name}</span>\n                </div>\n            </div>\n            <h4>{props.message.body}</h4>\n        </div>     \n    )\n}\n\nexport default ChatMessage;\n","/home/benjie/testing/chat-app/frontend/src/components/ChatRoom/ChatRoomWebSocket.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":46,"column":17,"nodeType":"72","messageId":"73","endLine":46,"endColumn":24},{"ruleId":"74","severity":1,"message":"75","line":66,"column":8,"nodeType":"76","endLine":66,"endColumn":10,"suggestions":"77"},{"ruleId":"70","severity":1,"message":"78","line":1,"column":38,"nodeType":"72","messageId":"73","endLine":1,"endColumn":47},{"ruleId":"70","severity":1,"message":"79","line":1,"column":49,"nodeType":"72","messageId":"73","endLine":1,"endColumn":57},{"ruleId":"70","severity":1,"message":"80","line":10,"column":8,"nodeType":"72","messageId":"73","endLine":10,"endColumn":14},{"ruleId":"70","severity":1,"message":"81","line":63,"column":17,"nodeType":"72","messageId":"73","endLine":63,"endColumn":22},{"ruleId":"70","severity":1,"message":"82","line":102,"column":13,"nodeType":"72","messageId":"73","endLine":102,"endColumn":21},{"ruleId":"70","severity":1,"message":"80","line":2,"column":8,"nodeType":"72","messageId":"73","endLine":2,"endColumn":14},{"ruleId":"70","severity":1,"message":"83","line":3,"column":8,"nodeType":"72","messageId":"73","endLine":3,"endColumn":14},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'user_id' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["86"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'avatar' is defined but never used.","'users' is assigned a value but never used.","'tabValue' is assigned a value but never used.","'Avatar' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Update the dependencies array to be: [props]",{"range":"89","text":"90"},[2152,2154],"[props]"]